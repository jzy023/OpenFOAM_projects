/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2206                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default         Gauss linear;
    nHat            pointCellsLeastSquares;
}

divSchemes
{
    default             none;
    // default             Gauss upwind;
    // default             Gauss limitedLinear 0;
    // default             bounded Gauss limitedLinear 1; 
    
    // div(phi,Yi)         bounded Gauss limitedLinear 1;
    // div(phi,Gi)         bounded Gauss limitedLinear 1;

    // div(phi,U)          Gauss LUST grad(U);
    // div(phi,U)          Gauss upwind;
    // div(phi,T)          Gauss linearUpwind grad(T);
    // div(phi,k)          Gauss upwind;
    // div(phi,omega)      Gauss upwind;
    // div(phi,epsilon)    Gauss upwind;

    // div((nuEff*dev2(T(grad(U))))) Gauss linear;


    // testing
    // div(rhoPhi,U)       Gauss upwind; // Gauss linearUpwind grad(U);
    div(rhoPhi,T)       Gauss upwind; // Gauss linearUpwind grad(T);

    // div(phi,Yi)         bounded Gauss limitedLinear 1;
    // div(phi,Gi)         bounded Gauss limitedLinear 1;

    // div(phi,alpha)      Gauss vanLeer;
    // div(phirb,alpha)    Gauss linear;

    div(rhoPhi,U)       Gauss SFCD;
    div(phi,alpha)      Gauss vanLeer01;
    div(phi,Yi)         Gauss vanLeer01;
    div(phirb,alpha)    Gauss interfaceCompression;
    div(phiH,Yi)        Gauss linear;

    // "div\(alphaRhoPhi.*,(h|e).*\)"  Gauss limitedLinear 1; // <-- reserved for turbulence
    // "div\(alphaRhoPhi.*,K.*\)"      Gauss limitedLinear 1; // <-- reserved for turbulence
    // "div\(alphaPhi.*,p\)"           Gauss limitedLinear 1; // <-- reserved for turbulence

    div((interpolate(cp)*rhoPhi),T)     Gauss upwind;
    div((muEff*dev(T(grad(U)))))        Gauss linear;
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;

}

laplacianSchemes
{
    default         Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    // default         orthogonal;
    default         corrected;
}


// ************************************************************************* //

